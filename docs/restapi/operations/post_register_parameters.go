// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostRegisterMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PostRegisterMaxParseMemory int64 = 32 << 20

// NewPostRegisterParams creates a new PostRegisterParams object
//
// There are no default values defined in the spec.
func NewPostRegisterParams() PostRegisterParams {

	return PostRegisterParams{}
}

// PostRegisterParams contains all the bound params for the post register operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostRegister
type PostRegisterParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	Address *string
	/*Image or link that will be used to represents avatar users account
	  In: formData
	*/
	Avatar *string
	/*
	  Required: true
	  In: formData
	*/
	Birthday string
	/*
	  Required: true
	  In: formData
	*/
	Email string
	/*The users complete name
	  Required: true
	  In: formData
	*/
	Name string
	/*The password is used to log in
	  Required: true
	  In: formData
	*/
	Password string
	/*
	  Required: true
	  In: formData
	*/
	PhoneNumber int64
	/*The username to be used in project
	  Required: true
	  In: formData
	*/
	Username string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostRegisterParams() beforehand.
func (o *PostRegisterParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(PostRegisterMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdAddress, fdhkAddress, _ := fds.GetOK("address")
	if err := o.bindAddress(fdAddress, fdhkAddress, route.Formats); err != nil {
		res = append(res, err)
	}

	fdAvatar, fdhkAvatar, _ := fds.GetOK("avatar")
	if err := o.bindAvatar(fdAvatar, fdhkAvatar, route.Formats); err != nil {
		res = append(res, err)
	}

	fdBirthday, fdhkBirthday, _ := fds.GetOK("birthday")
	if err := o.bindBirthday(fdBirthday, fdhkBirthday, route.Formats); err != nil {
		res = append(res, err)
	}

	fdEmail, fdhkEmail, _ := fds.GetOK("email")
	if err := o.bindEmail(fdEmail, fdhkEmail, route.Formats); err != nil {
		res = append(res, err)
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPassword, fdhkPassword, _ := fds.GetOK("password")
	if err := o.bindPassword(fdPassword, fdhkPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPhoneNumber, fdhkPhoneNumber, _ := fds.GetOK("phoneNumber")
	if err := o.bindPhoneNumber(fdPhoneNumber, fdhkPhoneNumber, route.Formats); err != nil {
		res = append(res, err)
	}

	fdUsername, fdhkUsername, _ := fds.GetOK("username")
	if err := o.bindUsername(fdUsername, fdhkUsername, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAddress binds and validates parameter Address from formData.
func (o *PostRegisterParams) bindAddress(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Address = &raw

	return nil
}

// bindAvatar binds and validates parameter Avatar from formData.
func (o *PostRegisterParams) bindAvatar(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Avatar = &raw

	return nil
}

// bindBirthday binds and validates parameter Birthday from formData.
func (o *PostRegisterParams) bindBirthday(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("birthday", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("birthday", "formData", raw); err != nil {
		return err
	}
	o.Birthday = raw

	return nil
}

// bindEmail binds and validates parameter Email from formData.
func (o *PostRegisterParams) bindEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("email", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("email", "formData", raw); err != nil {
		return err
	}
	o.Email = raw

	return nil
}

// bindName binds and validates parameter Name from formData.
func (o *PostRegisterParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("name", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("name", "formData", raw); err != nil {
		return err
	}
	o.Name = raw

	return nil
}

// bindPassword binds and validates parameter Password from formData.
func (o *PostRegisterParams) bindPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("password", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("password", "formData", raw); err != nil {
		return err
	}
	o.Password = raw

	return nil
}

// bindPhoneNumber binds and validates parameter PhoneNumber from formData.
func (o *PostRegisterParams) bindPhoneNumber(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("phoneNumber", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("phoneNumber", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("phoneNumber", "formData", "int64", raw)
	}
	o.PhoneNumber = value

	return nil
}

// bindUsername binds and validates parameter Username from formData.
func (o *PostRegisterParams) bindUsername(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("username", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("username", "formData", raw); err != nil {
		return err
	}
	o.Username = raw

	return nil
}
