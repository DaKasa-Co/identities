// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostChallRecoveryHandlerFunc turns a function with the right signature into a post chall recovery handler
type PostChallRecoveryHandlerFunc func(PostChallRecoveryParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostChallRecoveryHandlerFunc) Handle(params PostChallRecoveryParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostChallRecoveryHandler interface for that can handle valid post chall recovery params
type PostChallRecoveryHandler interface {
	Handle(PostChallRecoveryParams, interface{}) middleware.Responder
}

// NewPostChallRecovery creates a new http.Handler for the post chall recovery operation
func NewPostChallRecovery(ctx *middleware.Context, handler PostChallRecoveryHandler) *PostChallRecovery {
	return &PostChallRecovery{Context: ctx, Handler: handler}
}

/*
	PostChallRecovery swagger:route POST /chall-recovery postChallRecovery

Checks if who request recovery ticket are the account's owner
*/
type PostChallRecovery struct {
	Context *middleware.Context
	Handler PostChallRecoveryHandler
}

func (o *PostChallRecovery) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostChallRecoveryParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
